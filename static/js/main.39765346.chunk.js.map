{"version":3,"sources":["TodoList/TodoList.module.css","TodoListTask/TodoListTask.module.css","AddItemForm/AddItemForm.module.css","EditableSpan/EditableSpan.module.css","EditableSpan/EditableSpan.tsx","TodoListTask/TodoListTask.tsx","AddItemForm/AddItemForm.tsx","TodoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EditableSpan","title","useState","editMode","setEditMode","value","setValue","onBlur","e","currentTarget","onDoubleClick","className","s","text","TodoListTask","props","isDone","styles","selected","key","item","type","onChange","changeChecked","id","checked","todolistId","delete","onClick","removeTask","AddItemForm","setTitle","error","setError","addItem","trim","onKeyPress","addBtn","errorMessage","TodoList","titleBtn","deleteTodolist","addTask","filterBtns","btn","filter","changeFilter","tasks","map","v","App","TodoListId_1","v1","TodoListId_2","todolists","setTodolists","setTasks","task","todoId","find","todolist","tl","TodoListId","allTodolistsTasks","tasksForTodoList","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.39765346.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodoList_title__1OkaA\",\"titleBtn\":\"TodoList_titleBtn__F-DKV\",\"btn\":\"TodoList_btn__3WFXZ\",\"filterBtns\":\"TodoList_filterBtns__3dBOs\",\"selected\":\"TodoList_selected__1SpYK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoListTask_item__RhlY-\",\"selected\":\"TodoListTask_selected__clsl1\",\"delete\":\"TodoListTask_delete__26oXH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBtn\":\"AddItemForm_addBtn__3Z27N\",\"error\":\"AddItemForm_error__3BAQN\",\"errorMessage\":\"AddItemForm_errorMessage__3hGqD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__2PYLU\"};","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './EditableSpan.module.css'\r\nimport { Simulate } from 'react-dom/test-utils'\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n}\r\nexport const EditableSpan = ({title}: EditableSpanType) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  \r\n  const editModeHandler = () => {\r\n    setEditMode(true)\r\n  }\r\n  \r\n  const editTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.currentTarget.value)\r\n    setEditMode(false)\r\n  }\r\n  \r\n  return (\r\n   <>\r\n     {editMode ? <input value={value} onBlur={editTitle}/> : <span onDoubleClick={editModeHandler} className={s.text}>{title}</span>}\r\n   </>\r\n  )\r\n}\r\n\r\n// export default EditableSpan\r\n","import React, { ChangeEvent } from 'react'\r\nimport styles from './TodoListTask.module.css'\r\nimport { EditableSpan } from '../EditableSpan/EditableSpan'\r\n\r\ntype TodoListTaskPropsType = {\r\n  todolistId: string\r\n  title: string\r\n  key: string\r\n  id: string\r\n  isDone: boolean\r\n  removeTask: (id: string, todolistId: string) => void\r\n  changeChecked: (id: string, isDone: boolean, todolistId: string) => void\r\n}\r\n\r\nfunction TodoListTask(props: TodoListTaskPropsType) {\r\n  \r\n  const onCheckedHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeChecked(props.id, e.currentTarget.checked, props.todolistId)\r\n  }\r\n  \r\n  const removeTask = () => {\r\n    props.removeTask(props.id, props.todolistId)\r\n  }\r\n  \r\n  const taskCompleted = props.isDone ? styles.selected : ''\r\n  \r\n  return (\r\n    <li key={props.key}>\r\n\t\t\t<span className={styles.item}>\r\n\t\t\t\t<input type=\"checkbox\" onChange={onCheckedHandler} checked={props.isDone}/>\r\n        {/*<span className={`${styles.text} ${taskCompleted}`}>{props.title}</span>*/}\r\n        <EditableSpan title={props.title}/>\r\n\t\t\t\t<button className={styles.delete} onClick={removeTask}>x</button>\r\n\t\t\t</span>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default TodoListTask","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport styles from './AddItemForm.module.css'\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormType) => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  \r\n  const addItem = () => {\r\n    if (title.trim()) {\r\n      props.addItem(title)\r\n      setTitle('')\r\n    } else {\r\n      setError('Title is required!')\r\n      setTitle('')\r\n    }\r\n  }\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  \r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <input\r\n        className={error ? styles.error : ''}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n      />\r\n      <button className={styles.addBtn} onClick={addItem}>Add</button>\r\n      {error && <div className={styles.errorMessage}>{error}</div>}\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport { FilterType, TaskType } from '../App'\r\nimport TodoListTask from '../TodoListTask/TodoListTask'\r\nimport styles from './TodoList.module.css'\r\nimport { AddItemForm } from '../AddItemForm/AddItemForm'\r\n\r\ntype TodoListPropsType = {\r\n  id: string\r\n  title: string\r\n  filter: string\r\n  tasks: TaskType[]\r\n  addTask: (title: string, todolistId: string) => void\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  changeChecked: (id: string, isDone: boolean, todolistId: string) => void\r\n  changeFilter: (value: FilterType, todolistId: string) => void\r\n  deleteTodolist: (todolistId: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n  const addTask = (title: string) => {\r\n    props.addTask(title, props.id)\r\n  }\r\n  \r\n  const deleteTodolist = () => {\r\n    props.deleteTodolist(props.id)\r\n  }\r\n  \r\n  const showAllTasks = () => props.changeFilter('all', props.id)\r\n  const showActiveTasks = () => props.changeFilter('active', props.id)\r\n  const showCompletedTasks = () => props.changeFilter('completed', props.id)\r\n  \r\n  return (\r\n    <div>\r\n      <h3 className={styles.title}>{props.title}\r\n        <button className={styles.titleBtn} onClick={deleteTodolist}>x</button>\r\n      </h3>\r\n      \r\n      <AddItemForm addItem={addTask}/>\r\n      \r\n      <div className={styles.filterBtns}>\r\n        <button className={`${styles.btn} ${props.filter === 'all' ? styles.selected : ''}`} onClick={showAllTasks}>All\r\n        </button>\r\n        <button className={`${styles.btn} ${props.filter === 'active' ? styles.selected : ''}`}\r\n                onClick={showActiveTasks}>Active\r\n        </button>\r\n        <button className={`${styles.btn} ${props.filter === 'completed' ? styles.selected : ''}`}\r\n                onClick={showCompletedTasks}>Completed\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        \r\n        {props.tasks && props.tasks.map(v => <TodoListTask key={v.id} id={v.id} todolistId={props.id} title={v.title} isDone={v.isDone}\r\n                                            removeTask={props.removeTask}\r\n                                            changeChecked={props.changeChecked}\r\n        />)}\r\n      </ul>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport TodoList from './TodoList/TodoList'\r\nimport { v1 } from 'uuid'\r\nimport { AddItemForm } from './AddItemForm/AddItemForm'\r\n\r\nexport type TaskType = {\r\n  title: string\r\n  id: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type TasksListType = {\r\n  [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistsType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterType\r\n}\r\n\r\nfunction App() {\r\n  const TodoListId_1 = v1()\r\n  const TodoListId_2 = v1()\r\n  \r\n  let [todolists, setTodolists] = useState<TodolistsType[]>([\r\n    {\r\n      id: TodoListId_1,\r\n      title: 'What to learn',\r\n      filter: 'all',\r\n    },\r\n    {\r\n      id: TodoListId_2,\r\n      title: 'What to buy',\r\n      filter: 'all',\r\n    },\r\n  ])\r\n  \r\n  let [tasks, setTasks] = useState<TasksListType>({\r\n    [TodoListId_1]: [\r\n      {id: v1(), title: 'CSS', isDone: true},\r\n      {id: v1(), title: 'HTML', isDone: true},\r\n      {id: v1(), title: 'JS', isDone: false},\r\n    ],\r\n    [TodoListId_2]: [\r\n      {id: v1(), title: 'Chair', isDone: false},\r\n      {id: v1(), title: 'Table', isDone: false},\r\n      {id: v1(), title: 'Computer', isDone: false},\r\n    ],\r\n  })\r\n  \r\n  const addTask = (title: string, todolistId: string) => {\r\n    const task = {\r\n      id: v1(),\r\n      title: title,\r\n      isDone: false,\r\n    }\r\n    tasks[todolistId] = [task, ...tasks[todolistId]]\r\n    setTasks({...tasks})\r\n  }\r\n  const addTodolist = (title: string) => {\r\n    const TodoListId = v1()\r\n    const todolist: TodolistsType = {\r\n      id: TodoListId,\r\n      title: title,\r\n      filter: 'all',\r\n    }\r\n    setTodolists([todolist, ...todolists])\r\n    tasks[TodoListId] = []\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const removeTask = (todoId: string, todolistId: string) => {\r\n    tasks[todolistId] = tasks[todolistId].filter(v => v.id !== todoId)\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const changeChecked = (todoId: string, isDone: boolean, todolistId: string) => {\r\n    let task = tasks[todolistId].find(v => v.id === todoId)\r\n    if (task) {\r\n      task.isDone = isDone\r\n      setTasks({...tasks})\r\n    }\r\n  }\r\n  \r\n  const changeFilter = (value: FilterType, todolistId: string) => {\r\n    let todolist = todolists.find(v => v.id === todolistId)\r\n    if (todolist) {\r\n      todolist.filter = value\r\n    }\r\n    setTodolists([...todolists])\r\n  }\r\n  \r\n  const deleteTodolist = (todolistId: string) => {\r\n    todolists = todolists.filter(tl => tl.id !== todolistId)\r\n    setTodolists(todolists)\r\n    delete tasks[todolistId]\r\n    setTasks({...tasks})\r\n  }\r\n  \r\n  const changeTitle = (todolistId: string,taskId: string, newTitle: string) => {\r\n    const targetTask = tasks[todolistId].find(t => t.id === taskId)\r\n    if (targetTask) {\r\n      targetTask.title = newTitle\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <AddItemForm addItem={addTodolist}/>\r\n      {todolists.map(tl => {\r\n          let allTodolistsTasks = tasks[tl.id]\r\n          let tasksForTodoList = allTodolistsTasks\r\n          \r\n          switch (tl.filter) {\r\n            case 'active':\r\n              tasksForTodoList = allTodolistsTasks.filter(t => !t.isDone)\r\n              break\r\n            case 'completed':\r\n              tasksForTodoList = allTodolistsTasks.filter(t => t.isDone)\r\n          }\r\n          return <TodoList\r\n            key={tl.id}\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tasksForTodoList}\r\n            filter={tl.filter}\r\n            addTask={addTask}\r\n            removeTask={removeTask}\r\n            changeChecked={changeChecked}\r\n            changeFilter={changeFilter}\r\n            deleteTodolist={deleteTodolist}\r\n          />\r\n        },\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}